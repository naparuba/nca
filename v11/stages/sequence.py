"""
D√©finition de la s√©quence d'ex√©cution des stages.
C'EST LE SEUL ENDROIT o√π l'ordre des stages est d√©fini.

Principe:
- Une liste ma√Ætre d√©finit l'ordre d'ex√©cution des stages
- Les stages eux-m√™mes ne connaissent PAS leur position
- Permet l'insertion, suppression et r√©organisation facile
- Source unique de v√©rit√© pour l'ordonnancement

Avantages:
- Flexibilit√© totale: modifier l'ordre sans toucher au code des stages
- Insertion facile: ajouter un stage entre deux autres
- Maintenance simple: un seul fichier √† modifier
"""

from typing import List, Optional


class StageSequence:
    """
    D√©finit l'ordre d'ex√©cution des stages.
    
    La s√©quence est d√©finie par une liste de slugs (identifiants uniques).
    Les stages sont ex√©cut√©s dans l'ordre de cette liste.
    
    Cette classe est la SEULE source de v√©rit√© pour l'ordre d'ex√©cution.
    Les stages eux-m√™mes n'ont aucune connaissance de leur position.
    """
    
    # üéØ S√âQUENCE MA√éTRE - L'ORDRE EST D√âFINI ICI ET NULLE PART AILLEURS
    # Pour modifier l'ordre d'ex√©cution, il suffit de r√©organiser cette liste
    # Pour ajouter un stage, il suffit de l'ins√©rer √† la position voulue
    DEFAULT_SEQUENCE = [
        'no_obstacles',           # Apprentissage de base sans obstacles
        'single_obstacle',        # Introduction d'un obstacle unique
        'multiple_obstacles',     # Gestion de plusieurs obstacles
        'variable_intensity',     # Intensit√© variable de la source
        'time_attenuation',       # Att√©nuation temporelle
    ]
    
    def __init__(self, custom_sequence: Optional[List[str]] = None):
        """
        Initialise la s√©quence.
        
        Args:
            custom_sequence: S√©quence personnalis√©e (optionnel)
                           Si None, utilise DEFAULT_SEQUENCE
        """
        # Copie de la s√©quence pour √©viter les modifications accidentelles
        self.sequence = custom_sequence.copy() if custom_sequence else self.DEFAULT_SEQUENCE.copy()
    
    def get_sequence(self) -> List[str]:
        """
        Retourne la s√©quence ordonn√©e des stages.
        
        Returns:
            Liste des slugs dans l'ordre d'ex√©cution
        """
        return self.sequence.copy()  # Copie pour immutabilit√©
    
    def get_position(self, slug: str) -> int:
        """
        Retourne la position d'un stage dans la s√©quence (0-indexed).
        
        Args:
            slug: Identifiant du stage
            
        Returns:
            Index du stage dans la s√©quence
            
        Raises:
            ValueError: Si le stage n'est pas dans la s√©quence
        """
        try:
            return self.sequence.index(slug)
        except ValueError:
            raise ValueError(
                f"Stage '{slug}' non trouv√© dans la s√©quence.\n"
                f"S√©quence actuelle: {', '.join(self.sequence)}"
            )
    
    def insert_before(self, new_slug: str, reference_slug: str):
        """
        Ins√®re un nouveau stage avant un stage de r√©f√©rence.
        
        Exemple:
            sequence.insert_before('new_stage', 'single_obstacle')
            # R√©sultat: [..., 'no_obstacles', 'new_stage', 'single_obstacle', ...]
        
        Args:
            new_slug: Slug du stage √† ins√©rer
            reference_slug: Slug du stage de r√©f√©rence
            
        Raises:
            ValueError: Si le stage de r√©f√©rence n'existe pas
        """
        position = self.get_position(reference_slug)
        self.sequence.insert(position, new_slug)
        print(f"‚úÖ Stage '{new_slug}' ins√©r√© avant '{reference_slug}'")
    
    def insert_after(self, new_slug: str, reference_slug: str):
        """
        Ins√®re un nouveau stage apr√®s un stage de r√©f√©rence.
        
        Exemple:
            sequence.insert_after('new_stage', 'no_obstacles')
            # R√©sultat: [..., 'no_obstacles', 'new_stage', 'single_obstacle', ...]
        
        Args:
            new_slug: Slug du stage √† ins√©rer
            reference_slug: Slug du stage de r√©f√©rence
            
        Raises:
            ValueError: Si le stage de r√©f√©rence n'existe pas
        """
        position = self.get_position(reference_slug)
        self.sequence.insert(position + 1, new_slug)
        print(f"‚úÖ Stage '{new_slug}' ins√©r√© apr√®s '{reference_slug}'")
    
    def remove(self, slug: str):
        """
        Retire un stage de la s√©quence.
        
        Args:
            slug: Identifiant du stage √† retirer
            
        Raises:
            ValueError: Si le stage n'existe pas dans la s√©quence
        """
        try:
            self.sequence.remove(slug)
            print(f"‚úÖ Stage '{slug}' retir√© de la s√©quence")
        except ValueError:
            raise ValueError(f"Stage '{slug}' non trouv√© dans la s√©quence")
    
    def reorder(self, new_sequence: List[str]):
        """
        Remplace compl√®tement la s√©quence par une nouvelle.
        
        Utile pour une r√©organisation compl√®te de l'ordre d'ex√©cution.
        
        Args:
            new_sequence: Nouvelle liste de slugs ordonn√©s
        """
        self.sequence = new_sequence.copy()
        print(f"‚úÖ S√©quence r√©organis√©e: {', '.join(self.sequence)}")
    
    def append(self, slug: str):
        """
        Ajoute un stage √† la fin de la s√©quence.
        
        Args:
            slug: Identifiant du stage √† ajouter
        """
        self.sequence.append(slug)
        print(f"‚úÖ Stage '{slug}' ajout√© √† la fin de la s√©quence")
    
    def prepend(self, slug: str):
        """
        Ajoute un stage au d√©but de la s√©quence.
        
        Args:
            slug: Identifiant du stage √† ajouter
        """
        self.sequence.insert(0, slug)
        print(f"‚úÖ Stage '{slug}' ajout√© au d√©but de la s√©quence")
    
    def get_length(self) -> int:
        """
        Retourne le nombre de stages dans la s√©quence.
        
        Returns:
            Nombre de stages
        """
        return len(self.sequence)
    
    def contains(self, slug: str) -> bool:
        """
        V√©rifie si un stage est dans la s√©quence.
        
        Args:
            slug: Identifiant du stage
            
        Returns:
            True si le stage est dans la s√©quence
        """
        return slug in self.sequence
    
    def get_next_stage(self, current_slug: str) -> Optional[str]:
        """
        Retourne le slug du stage suivant dans la s√©quence.
        
        Args:
            current_slug: Slug du stage actuel
            
        Returns:
            Slug du stage suivant ou None si c'est le dernier
            
        Raises:
            ValueError: Si le stage actuel n'est pas dans la s√©quence
        """
        position = self.get_position(current_slug)
        
        if position < len(self.sequence) - 1:
            return self.sequence[position + 1]
        
        return None
    
    def get_previous_stage(self, current_slug: str) -> Optional[str]:
        """
        Retourne le slug du stage pr√©c√©dent dans la s√©quence.
        
        Args:
            current_slug: Slug du stage actuel
            
        Returns:
            Slug du stage pr√©c√©dent ou None si c'est le premier
            
        Raises:
            ValueError: Si le stage actuel n'est pas dans la s√©quence
        """
        position = self.get_position(current_slug)
        
        if position > 0:
            return self.sequence[position - 1]
        
        return None
    
    def is_first(self, slug: str) -> bool:
        """
        V√©rifie si un stage est le premier de la s√©quence.
        
        Args:
            slug: Identifiant du stage
            
        Returns:
            True si le stage est en premi√®re position
        """
        return self.sequence[0] == slug if self.sequence else False
    
    def is_last(self, slug: str) -> bool:
        """
        V√©rifie si un stage est le dernier de la s√©quence.
        
        Args:
            slug: Identifiant du stage
            
        Returns:
            True si le stage est en derni√®re position
        """
        return self.sequence[-1] == slug if self.sequence else False
    
    def __repr__(self) -> str:
        """Repr√©sentation textuelle de la s√©quence."""
        return f"StageSequence({' ‚Üí '.join(self.sequence)})"
    
    def __len__(self) -> int:
        """Permet d'utiliser len() sur la s√©quence."""
        return len(self.sequence)
    
    def __iter__(self):
        """Permet d'it√©rer directement sur la s√©quence."""
        return iter(self.sequence)

