import os
# HACK for imports
import sys
import time

import numpy as np
import torch

from nca_model import NCA
from stage_manager import STAGE_MANAGER
from trainer import Trainer
from visualizer import ProgressiveVisualizer

# Hack for imports
sys.path.append(os.path.dirname(__file__))

from config import CONFIG, DEVICE

# Initialisation
torch.manual_seed(CONFIG.SEED)
np.random.seed(CONFIG.SEED)

# Cr√©ation du r√©pertoire de sortie avec seed
CONFIG.OUTPUT_DIR = f"outputs"
os.makedirs(CONFIG.OUTPUT_DIR, exist_ok=True)

print(f"Device: {DEVICE}")
print(f"Seed: {CONFIG.SEED}")
print(f"R√©pertoire de sortie: {CONFIG.OUTPUT_DIR}")


def main():
    """
    Fonction principale pour l'entra√Ænement modulaire progressif.
    Orchestre tout le processus d'apprentissage par curriculum.
    """
    print(f"\n" + "=" * 80)
    print(f"üöÄ NEURAL CELLULAR AUTOMATON - APPRENTISSAGE MODULAIRE")
    print(f"=" * 80)
    
    try:
        # Initialisation du mod√®le
        print("\nüîß Initialisation du mod√®le...")
        model = NCA(input_size=11,  # 9 (patch 3x3) + 1 (source) + 1 (obstacle)
                    ).to(DEVICE)
        
        print(f"üìä Nombre de param√®tres dans le mod√®le: {sum(p.numel() for p in model.parameters()):,}")
        
        # Initialisation de l'entra√Æneur modulaire
        print("üéØ Initialisation de l'entra√Æneur modulaire...")
        trainer = Trainer(model)
        
        # Lancement de l'entra√Ænement complet
        print("üöÄ Lancement de l'entra√Ænement modulaire...")
        before = time.time()
        trainer.train_full_curriculum()
        after = time.time()
        
        # G√©n√©ration des visualisations progressives
        print("\nüé® G√©n√©ration des visualisations...")
        
        visualizer = ProgressiveVisualizer()
        
        # Visualisation par √©tape avec le mod√®le final
        for stage in STAGE_MANAGER.get_stages():
            visualizer.visualize_stage_results(model, stage)
        
        # R√©sum√© visuel complet du curriculum
        visualizer.create_curriculum_summary()
        
        # Rapport final
        print(f"\n" + "=" * 80)
        print(f"üéâ ENTRA√éNEMENT MODULAIRE TERMIN√â AVEC SUCC√àS!")
        print(f"=" * 80)
        print(f"üìÅ R√©sultats sauvegard√©s dans: {CONFIG.OUTPUT_DIR}")
        print(f"‚è±Ô∏è  Temps total: {f"{(after - before) / 60:.1f} min"}")
        print(f"üìä √âpoques: {CONFIG.TOTAL_EPOCHS}")
    
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Entra√Ænement interrompu par l'utilisateur")
        print(f"\n‚ùå Programme termin√© avec erreurs")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERREUR lors de l'entra√Ænement:")
        print(f"   {type(e).__name__}: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    # Ex√©cution du programme principal
    results = main()
    print(f"\nüéØ Programme termin√© avec succ√®s!")
