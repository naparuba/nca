import argparse
import os
# HACK for imports
import sys
import time
import traceback

import numpy as np
import torch

from nca_model import NCA
from stage_manager import STAGE_MANAGER
from trainer import Trainer
from visualizer import get_visualizer

# Hack for imports
sys.path.append(os.path.dirname(__file__))

from config import CONFIG, DEVICE


def parse_command_line_args() -> None:
    """
    Parse les arguments de ligne de commande et met √† jour la configuration.
    
    Permet de surcharger les valeurs par d√©faut de CONFIG via des arguments CLI.
    Cette approche facilite l'exp√©rimentation sans modifier le code source.
    
    Arguments support√©s:
    - --epochs: Nombre d'√©poques par √©tape d'entra√Ænement
    - --nca-steps: Nombre d'√©tapes NCA par s√©quence de simulation
    - --hidden-size: Taille de la couche cach√©e du r√©seau de neurones
    - --n-layers: Nombre de couches du r√©seau de neurones
    """
    parser = argparse.ArgumentParser(description="Neural Cellular Automaton - Apprentissage modulaire progressif")
    # Arguments pour surcharger les param√®tres d'entra√Ænement
    parser.add_argument("--epochs", type=int, default=CONFIG.NB_EPOCHS_BY_STAGE, help="Epoques par stage")
    parser.add_argument("--nca-steps", type=int, default=CONFIG.NCA_STEPS, help="√©tapes temporelle par simulation")
    # Arguments pour surcharger l'architecture du mod√®le
    parser.add_argument("--hidden-size", type=int, default=CONFIG.HIDDEN_SIZE)
    parser.add_argument("--n-layers", type=int, default=CONFIG.N_LAYERS)
    
    # Parse des arguments et mise √† jour de la configuration
    args = parser.parse_args()
    
    # Application des valeurs surcharg√©es √† la configuration globale
    # Ces modifications affectent tous les composants qui utilisent CONFIG
    CONFIG.NB_EPOCHS_BY_STAGE = args.epochs
    CONFIG.NCA_STEPS = args.nca_steps
    CONFIG.HIDDEN_SIZE = args.hidden_size
    CONFIG.N_LAYERS = args.n_layers
    
    # Recalcul du nombre total d'√©poques bas√© sur la nouvelle valeur par √©tape
    CONFIG.TOTAL_EPOCHS = CONFIG.NB_EPOCHS_BY_STAGE * len(STAGE_MANAGER.get_stages())
    
    # Affichage des param√®tres effectifs pour confirmation
    print(f"üìã Configuration effective:")
    print(f"   ‚Ä¢ √âpoques par √©tape: {CONFIG.NB_EPOCHS_BY_STAGE}")
    print(f"   ‚Ä¢ √âtapes NCA: {CONFIG.NCA_STEPS}")
    print(f"   ‚Ä¢ Taille cach√©e: {CONFIG.HIDDEN_SIZE}")
    print(f"   ‚Ä¢ Nombre de couches: {CONFIG.N_LAYERS}")
    print(f"   ‚Ä¢ Total √©poques: {CONFIG.TOTAL_EPOCHS}")


# Initialisation - Application des arguments CLI avant tout le reste
parse_command_line_args()

# Initialisation
torch.manual_seed(CONFIG.SEED)
np.random.seed(CONFIG.SEED)

# Cr√©ation du r√©pertoire de sortie avec seed
CONFIG.OUTPUT_DIR = f"outputs"
os.makedirs(CONFIG.OUTPUT_DIR, exist_ok=True)

print(f"Device: {DEVICE}")
print(f"Seed: {CONFIG.SEED}")
print(f"R√©pertoire de sortie: {CONFIG.OUTPUT_DIR}")


def main():
    """
    Fonction principale pour l'entra√Ænement modulaire progressif.
    Orchestre tout le processus d'apprentissage par curriculum.
    """
    print(f"\n" + "=" * 80)
    print(f"üöÄ NEURAL CELLULAR AUTOMATON - APPRENTISSAGE MODULAIRE")
    print(f"=" * 80)
    
    try:
        # Initialisation du mod√®le
        print("\nüîß Initialisation du mod√®le...")
        model = NCA().to(DEVICE)
        
        print(f"üìä Nombre de param√®tres dans le mod√®le: {sum(p.numel() for p in model.parameters()):,}")
        
        # Initialisation de l'entra√Æneur modulaire
        print("üéØ Initialisation de l'entra√Æneur modulaire...")
        trainer = Trainer(model)
        
        # Lancement de l'entra√Ænement complet
        print("üöÄ Lancement de l'entra√Ænement modulaire...")
        before = time.time()
        trainer.train_full_curriculum()
        after = time.time()
        
        # G√©n√©ration des visualisations progressives
        print("\nüé® G√©n√©ration des visualisations...")
        
        visualizer = get_visualizer()
        
        # R√©sum√© visuel complet du curriculum
        visualizer.create_curriculum_summary()
        
        # Rapport final
        print(f"\n" + "=" * 80)
        print(f"üéâ ENTRA√éNEMENT MODULAIRE TERMIN√â AVEC SUCC√àS!")
        print(f"=" * 80)
        print(f"üìÅ R√©sultats sauvegard√©s dans: {CONFIG.OUTPUT_DIR}")
        print(f"‚è±Ô∏è  Temps total: {f"{(after - before) / 60:.1f} min"}")
        print(f"üìä √âpoques: {CONFIG.TOTAL_EPOCHS}")
    
    except KeyboardInterrupt:
        print(f"\n‚ö†Ô∏è  Entra√Ænement interrompu par l'utilisateur")
        print(f"\n‚ùå Programme termin√© avec erreurs")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERREUR lors de l'entra√Ænement:")
        print(f"   {type(e).__name__}: {str(e)}")
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    # Ex√©cution du programme principal
    results = main()
    print(f"\nüéØ Programme termin√© avec succ√®s!")
