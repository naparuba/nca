"""
Suite compl√®te de visualisation pour NCA modulaire avec intensit√©s variables.
Migr√© depuis visualize_modular_progressive_obstacles_variable_intensity.py
"""

from typing import Dict, Any
from pathlib import Path

from .progressive_visualizer import ProgressiveVisualizer


def create_complete_visualization_suite(model, global_metrics: Dict[str, Any],
                                      simulator, cfg):
    """
    Cr√©e la suite compl√®te de visualisations pour la version 8__.
    
    Comprend:
    - Visualisations par √©tape (1-4) avec intensit√©s
    - Comparaisons d'intensit√©s pour l'√©tape 4
    - Graphiques de curriculum √©tendu
    - M√©triques sp√©cialis√©es intensit√©s variables
    
    Args:
        model: Mod√®le NCA entra√Æn√©
        global_metrics: M√©triques globales d'entra√Ænement
        simulator: Simulateur de diffusion
        cfg: Configuration du syst√®me
    """
    print("\n" + "="*80)
    print("üé® G√âN√âRATION DE LA SUITE COMPL√àTE DE VISUALISATIONS v8__")
    print("="*80)
    
    # Initialisation du visualiseur progressif
    visualizer = ProgressiveVisualizer()
    
    # 1. Visualisations par √©tape (√©tendues)
    print("\nüé® G√©n√©ration des visualisations par √©tape...")
    
    # √âtapes 1-3: intensit√© standard
    for stage in [1, 2, 3]:
        stage_vis = visualizer.visualize_stage_results(model, stage, simulator, cfg)

    # √âtape 4: plusieurs intensit√©s pour analyse comparative
    stage_4_intensities = [0.0, 0.3, 0.7, 1.0]
    for intensity in stage_4_intensities:
        stage_vis = visualizer.visualize_stage_results(model, stage=4, simulator=simulator, cfg=cfg,
                                                         source_intensity=intensity)

    
    # 2. Grille comparative d'intensit√©s
    print("\nüé® G√©n√©ration de la grille comparative d'intensit√©s...")
    visualizer.create_intensity_comparison_grid(model, simulator, cfg)

    
    # 3. Curriculum d'intensit√© (nouveau)
    print("\nüé® G√©n√©ration des graphiques de curriculum d'intensit√©...")
    if 'stage_4_metrics' in global_metrics:
        visualizer.visualize_intensity_curriculum(global_metrics['stage_4_metrics'], cfg)
    else:
        print("‚ö†Ô∏è M√©triques √©tape 4 non disponibles pour le curriculum d'intensit√©")

    
    # 4. R√©sum√© visuel √©tendu
    print("\nüé® G√©n√©ration du r√©sum√© visuel complet √©tendu...")
    visualizer.create_curriculum_summary_extended(global_metrics, cfg)

    
    print("\n" + "="*80)
    print("‚úÖ SUITE COMPL√àTE DE VISUALISATIONS v8__ G√âN√âR√âE!")
    print("="*80)
    
    # R√©sum√© des fichiers g√©n√©r√©s pour information
    output_dir = Path(cfg.OUTPUT_DIR)
    print(f"\nüìÅ Fichiers g√©n√©r√©s dans: {output_dir}")
    print("üìã Liste des visualisations:")
    print("   ‚Ä¢ Animations par √©tape: stage_X/")
    print("   ‚Ä¢ Grille comparative intensit√©s: intensity_comparison_grid.png")
    print("   ‚Ä¢ Distribution intensit√©s: intensity_distribution.png")
    print("   ‚Ä¢ Performance par plage: performance_by_intensity_range.png")
    print("   ‚Ä¢ Convergence vs intensit√©: convergence_analysis_by_intensity.png")
    print("   ‚Ä¢ Progression curriculum √©tendu: curriculum_progression_extended.png")
    print("   ‚Ä¢ Comparaison √©tapes √©tendue: stage_comparison_extended.png")
    print("   ‚Ä¢ R√©sum√© performance √©tendu: performance_summary_extended.png")
